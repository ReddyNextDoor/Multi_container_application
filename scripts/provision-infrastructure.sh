#!/bin/bash

# Infrastructure provisioning script for Todo API
# This script automates the Terraform infrastructure provisioning process

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TERRAFORM_DIR="$PROJECT_ROOT/terraform"

# Default values
ENVIRONMENT="${ENVIRONMENT:-production}"
AWS_REGION="${AWS_REGION:-us-east-1}"
INSTANCE_TYPE="${INSTANCE_TYPE:-t3.micro}"
KEY_PAIR_NAME="${KEY_PAIR_NAME:-}"
PROJECT_NAME="${PROJECT_NAME:-todo-api}"
AUTO_APPROVE="${AUTO_APPROVE:-false}"
DESTROY="${DESTROY:-false}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Usage function
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Provision or destroy infrastructure for Todo API using Terraform

OPTIONS:
    -e, --environment   Environment name (default: production)
    -r, --region        AWS region (default: us-east-1)
    -t, --type          EC2 instance type (default: t3.micro)
    -k, --key-pair      AWS key pair name (required)
    -p, --project       Project name (default: todo-api)
    -y, --auto-approve  Auto approve Terraform changes
    --destroy           Destroy infrastructure instead of creating
    --help              Show this help message

ENVIRONMENT VARIABLES:
    ENVIRONMENT         Environment name
    AWS_REGION          AWS region
    INSTANCE_TYPE       EC2 instance type
    KEY_PAIR_NAME       AWS key pair name
    PROJECT_NAME        Project name
    AUTO_APPROVE        Auto approve changes (true/false)
    DESTROY             Destroy infrastructure (true/false)

EXAMPLES:
    $0 --key-pair my-key --environment staging
    $0 -k my-key -e production -r us-west-2 -t t3.small
    $0 --destroy --key-pair my-key --auto-approve

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -r|--region)
            AWS_REGION="$2"
            shift 2
            ;;
        -t|--type)
            INSTANCE_TYPE="$2"
            shift 2
            ;;
        -k|--key-pair)
            KEY_PAIR_NAME="$2"
            shift 2
            ;;
        -p|--project)
            PROJECT_NAME="$2"
            shift 2
            ;;
        -y|--auto-approve)
            AUTO_APPROVE="true"
            shift
            ;;
        --destroy)
            DESTROY="true"
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate required parameters
if [[ -z "$KEY_PAIR_NAME" ]]; then
    log_error "AWS key pair name is required. Use --key-pair or set KEY_PAIR_NAME environment variable."
    exit 1
fi

# Validate Terraform directory exists
if [[ ! -d "$TERRAFORM_DIR" ]]; then
    log_error "Terraform directory not found: $TERRAFORM_DIR"
    exit 1
fi

# Check if Terraform is installed
if ! command -v terraform &> /dev/null; then
    log_error "terraform command not found. Please install Terraform."
    exit 1
fi

# Check if AWS CLI is installed and configured
if ! command -v aws &> /dev/null; then
    log_error "aws command not found. Please install AWS CLI."
    exit 1
fi

# Verify AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    log_error "AWS credentials not configured. Please run 'aws configure' or set AWS environment variables."
    exit 1
fi

# Change to Terraform directory
cd "$TERRAFORM_DIR"

# Create terraform.tfvars file
log_info "Creating terraform.tfvars file..."
cat > terraform.tfvars << EOF
# Auto-generated by provision-infrastructure.sh
project_name     = "$PROJECT_NAME"
environment      = "$ENVIRONMENT"
aws_region       = "$AWS_REGION"
instance_type    = "$INSTANCE_TYPE"
key_pair_name    = "$KEY_PAIR_NAME"
allowed_ssh_cidr = "0.0.0.0/0"
volume_size      = 20
enable_monitoring = true
EOF

log_info "Created terraform.tfvars with configuration:"
log_info "  Project: $PROJECT_NAME"
log_info "  Environment: $ENVIRONMENT"
log_info "  Region: $AWS_REGION"
log_info "  Instance Type: $INSTANCE_TYPE"
log_info "  Key Pair: $KEY_PAIR_NAME"

# Initialize Terraform
log_info "Initializing Terraform..."
if ! terraform init; then
    log_error "Terraform initialization failed"
    exit 1
fi

# Validate Terraform configuration
log_info "Validating Terraform configuration..."
if ! terraform validate; then
    log_error "Terraform validation failed"
    exit 1
fi

# Plan Terraform changes
if [[ "$DESTROY" == "true" ]]; then
    log_info "Planning infrastructure destruction..."
    if ! terraform plan -destroy -out=destroy.tfplan; then
        log_error "Terraform destroy plan failed"
        exit 1
    fi
    
    # Show what will be destroyed
    log_warn "The following resources will be DESTROYED:"
    terraform show destroy.tfplan
    
    # Confirm destruction unless auto-approved
    if [[ "$AUTO_APPROVE" != "true" ]]; then
        echo
        log_warn "⚠️  WARNING: This will permanently destroy all infrastructure!"
        read -p "Are you sure you want to proceed? Type 'yes' to confirm: " -r
        if [[ "$REPLY" != "yes" ]]; then
            log_info "Infrastructure destruction cancelled"
            rm -f destroy.tfplan
            exit 0
        fi
    fi
    
    # Apply destruction
    log_info "Destroying infrastructure..."
    if terraform apply destroy.tfplan; then
        log_info "✅ Infrastructure destroyed successfully!"
        rm -f destroy.tfplan
    else
        log_error "Infrastructure destruction failed"
        exit 1
    fi
    
else
    log_info "Planning infrastructure changes..."
    if ! terraform plan -out=apply.tfplan; then
        log_error "Terraform plan failed"
        exit 1
    fi
    
    # Show what will be created/changed
    log_info "The following changes will be applied:"
    terraform show apply.tfplan
    
    # Confirm application unless auto-approved
    if [[ "$AUTO_APPROVE" != "true" ]]; then
        echo
        read -p "Do you want to apply these changes? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Infrastructure provisioning cancelled"
            rm -f apply.tfplan
            exit 0
        fi
    fi
    
    # Apply changes
    log_info "Applying infrastructure changes..."
    if terraform apply apply.tfplan; then
        log_info "✅ Infrastructure provisioned successfully!"
        rm -f apply.tfplan
        
        # Display outputs
        echo
        log_info "=== INFRASTRUCTURE OUTPUTS ==="
        terraform output
        
        # Save outputs to file for other scripts
        terraform output -json > outputs.json
        log_info "Outputs saved to: $TERRAFORM_DIR/outputs.json"
        
        # Extract server IP for convenience
        if command -v jq &> /dev/null; then
            SERVER_IP=$(terraform output -json | jq -r '.server_public_ip.value' 2>/dev/null || echo "")
            if [[ -n "$SERVER_IP" && "$SERVER_IP" != "null" ]]; then
                echo
                log_info "🚀 Server is ready at: $SERVER_IP"
                log_info "SSH command: ssh -i ~/.ssh/$KEY_PAIR_NAME.pem ubuntu@$SERVER_IP"
                log_info "Next steps:"
                log_info "  1. Wait 2-3 minutes for server initialization"
                log_info "  2. Run Ansible configuration: ansible-playbook -i '$SERVER_IP,' ansible/site.yml"
                log_info "  3. Deploy application: ./scripts/deploy.sh --host $SERVER_IP"
            fi
        fi
        
    else
        log_error "Infrastructure provisioning failed"
        exit 1
    fi
fi

log_info "Infrastructure operation completed successfully!"