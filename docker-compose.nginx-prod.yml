version: '3.8'

services:
  # MongoDB Database Service
  mongodb:
    image: mongo:7.0
    container_name: todo-mongodb-prod
    restart: unless-stopped
    expose:
      - "27017"
    environment:
      MONGO_INITDB_DATABASE: todoapi
      # Production MongoDB with authentication (optional)
      # MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      # MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Todo API Service
  todo-api:
    image: ${DOCKER_IMAGE:-todo-api:latest}
    container_name: todo-api-prod
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://mongodb:27017/todoapi
      DB_NAME: todoapi
      DB_MAX_POOL_SIZE: 10
      DB_SERVER_SELECTION_TIMEOUT: 5000
      DB_SOCKET_TIMEOUT: 45000
    networks:
      - todo-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: todo-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configuration (production with SSL)
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # SSL certificates from Let's Encrypt
      - ./ssl/letsencrypt:/etc/letsencrypt:ro
      # Certbot webroot for Let's Encrypt challenges
      - ./ssl/webroot:/var/www/certbot:rw
      # Static files
      - ./nginx/static:/var/www/static:ro
      # Nginx logs
      - nginx_logs:/var/log/nginx
    networks:
      - todo-network
    depends_on:
      - todo-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: todo-certbot
    volumes:
      # SSL certificates storage
      - ./ssl/letsencrypt:/etc/letsencrypt:rw
      - ./ssl/webroot:/var/www/certbot:rw
    networks:
      - todo-network
    profiles:
      - ssl
    command: >
      sh -c "
        while :; do
          certbot renew --webroot --webroot-path=/var/www/certbot --quiet
          sleep 12h
        done
      "
    depends_on:
      - nginx

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  nginx_logs:
    driver: local

# Custom network for service communication
networks:
  todo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16