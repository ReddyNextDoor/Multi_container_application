name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: todo-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "Linting not configured, skipping..."

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/todo_test

    - name: Generate test coverage
      run: npm run test:coverage || echo "Coverage not configured, skipping..."

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy with Ansible
      run: |
        # Install Ansible
        pip install ansible
        
        # Create temporary inventory
        echo "${{ secrets.SERVER_HOST }} ansible_user=${{ secrets.SERVER_USER }}" > inventory.tmp
        
        # Run deployment playbook
        ansible-playbook -i inventory.tmp ansible/site.yml \
          -e "docker_image_tag=${{ needs.build-docker.outputs.image-tag }}" \
          -e "app_env=production"

    - name: Health check
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Check application health
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}/health || echo "000")
        
        if [ "$response" != "200" ]; then
          echo "Health check failed with status: $response"
          exit 1
        fi
        
        echo "Deployment successful - Health check passed"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        
        # Get previous successful image tag from Docker Hub
        PREVIOUS_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}/tags/?page_size=10" | \
          jq -r '.results[] | select(.name != "latest" and .name != "${{ github.sha }}") | .name' | head -1)
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Rolling back to: $PREVIOUS_TAG"
          ansible-playbook -i inventory.tmp ansible/site.yml \
            -e "docker_image_tag=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:$PREVIOUS_TAG" \
            -e "app_env=production"
        else
          echo "No previous version found for rollback"
        fi

  notify:
    needs: [build-and-test, build-docker, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment completed successfully"
          echo "Image: ${{ needs.build-docker.outputs.image-tag }}"
          echo "Server: ${{ secrets.SERVER_HOST }}"
        elif [ "${{ needs.deploy.result }}" == "failure" ]; then
          echo "❌ Deployment failed"
          echo "Check logs for details"
        else
          echo "ℹ️ Deployment skipped (not main branch)"
        fi